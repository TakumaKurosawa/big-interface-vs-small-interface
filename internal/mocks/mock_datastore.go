// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/biginterface (interfaces: DataStore)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_datastore.go -package=mocks github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/biginterface DataStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
	isgomock struct{}
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockDataStore) CreateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockDataStoreMockRecorder) CreateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockDataStore)(nil).CreateTodo), ctx, todo)
}

// CreateUser mocks base method.
func (m *MockDataStore) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDataStoreMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDataStore)(nil).CreateUser), ctx, user)
}

// DeleteTodo mocks base method.
func (m *MockDataStore) DeleteTodo(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockDataStoreMockRecorder) DeleteTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockDataStore)(nil).DeleteTodo), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockDataStore) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDataStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDataStore)(nil).DeleteUser), ctx, id)
}

// GetTodo mocks base method.
func (m *MockDataStore) GetTodo(ctx context.Context, id string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx, id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockDataStoreMockRecorder) GetTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockDataStore)(nil).GetTodo), ctx, id)
}

// GetUser mocks base method.
func (m *MockDataStore) GetUser(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDataStoreMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDataStore)(nil).GetUser), ctx, id)
}

// ListTodos mocks base method.
func (m *MockDataStore) ListTodos(ctx context.Context) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos", ctx)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockDataStoreMockRecorder) ListTodos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockDataStore)(nil).ListTodos), ctx)
}

// ListUserTodos mocks base method.
func (m *MockDataStore) ListUserTodos(ctx context.Context, userID string) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTodos", ctx, userID)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserTodos indicates an expected call of ListUserTodos.
func (mr *MockDataStoreMockRecorder) ListUserTodos(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTodos", reflect.TypeOf((*MockDataStore)(nil).ListUserTodos), ctx, userID)
}

// ListUsers mocks base method.
func (m *MockDataStore) ListUsers(ctx context.Context) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockDataStoreMockRecorder) ListUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockDataStore)(nil).ListUsers), ctx)
}

// MarkTodoComplete mocks base method.
func (m *MockDataStore) MarkTodoComplete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTodoComplete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTodoComplete indicates an expected call of MarkTodoComplete.
func (mr *MockDataStoreMockRecorder) MarkTodoComplete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTodoComplete", reflect.TypeOf((*MockDataStore)(nil).MarkTodoComplete), ctx, id)
}

// UpdateTodo mocks base method.
func (m *MockDataStore) UpdateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockDataStoreMockRecorder) UpdateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockDataStore)(nil).UpdateTodo), ctx, todo)
}

// UpdateUser mocks base method.
func (m *MockDataStore) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDataStoreMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDataStore)(nil).UpdateUser), ctx, user)
}
