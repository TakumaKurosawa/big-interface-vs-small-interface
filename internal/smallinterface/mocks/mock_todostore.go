// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/smallinterface (interfaces: TodoStore)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_todostore.go -package=mocks github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/smallinterface TodoStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/TakumaKurosawa/big-interface-vs-small-interface/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoStore is a mock of TodoStore interface.
type MockTodoStore struct {
	ctrl     *gomock.Controller
	recorder *MockTodoStoreMockRecorder
	isgomock struct{}
}

// MockTodoStoreMockRecorder is the mock recorder for MockTodoStore.
type MockTodoStoreMockRecorder struct {
	mock *MockTodoStore
}

// NewMockTodoStore creates a new mock instance.
func NewMockTodoStore(ctrl *gomock.Controller) *MockTodoStore {
	mock := &MockTodoStore{ctrl: ctrl}
	mock.recorder = &MockTodoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoStore) EXPECT() *MockTodoStoreMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoStore) CreateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoStoreMockRecorder) CreateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoStore)(nil).CreateTodo), ctx, todo)
}

// DeleteTodo mocks base method.
func (m *MockTodoStore) DeleteTodo(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoStoreMockRecorder) DeleteTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoStore)(nil).DeleteTodo), ctx, id)
}

// GetTodo mocks base method.
func (m *MockTodoStore) GetTodo(ctx context.Context, id string) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", ctx, id)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoStoreMockRecorder) GetTodo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoStore)(nil).GetTodo), ctx, id)
}

// ListTodos mocks base method.
func (m *MockTodoStore) ListTodos(ctx context.Context) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos", ctx)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodoStoreMockRecorder) ListTodos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodoStore)(nil).ListTodos), ctx)
}

// ListUserTodos mocks base method.
func (m *MockTodoStore) ListUserTodos(ctx context.Context, userID string) ([]*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserTodos", ctx, userID)
	ret0, _ := ret[0].([]*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserTodos indicates an expected call of ListUserTodos.
func (mr *MockTodoStoreMockRecorder) ListUserTodos(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserTodos", reflect.TypeOf((*MockTodoStore)(nil).ListUserTodos), ctx, userID)
}

// MarkTodoComplete mocks base method.
func (m *MockTodoStore) MarkTodoComplete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTodoComplete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTodoComplete indicates an expected call of MarkTodoComplete.
func (mr *MockTodoStoreMockRecorder) MarkTodoComplete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTodoComplete", reflect.TypeOf((*MockTodoStore)(nil).MarkTodoComplete), ctx, id)
}

// UpdateTodo mocks base method.
func (m *MockTodoStore) UpdateTodo(ctx context.Context, todo *domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoStoreMockRecorder) UpdateTodo(ctx, todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoStore)(nil).UpdateTodo), ctx, todo)
}
